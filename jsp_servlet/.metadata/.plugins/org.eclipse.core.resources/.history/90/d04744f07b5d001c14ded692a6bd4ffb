package com.message.Front;

import java.io.IOException;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import com.message.DAO.memberDAO;
import com.message.DTO.memberDTO;

@WebServlet("*.do")	// action -> a.do, b.do
public class FrontController extends HttpServlet {
	protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		
		// FrontController Pattern
		// 1. 모든 요청을 하나의 Servlet로 정의하는 패턴
		// 2. 중복되는 코드나 추적, 보안을 적용할 때 하나의 Servlet에서 정의되기 때문에 유지보수에 용이
	
		// 문제는? 누가 호출했는지를 모름 - url로 판단
		String uri = request.getRequestURI();
		System.out.println(uri);
		String path = request.getContextPath();
		System.out.println(path);
		String command = uri.substring(path.length()+1);
		System.out.println("요청기능 : "+command);
		
		if(command.equals("LoginCon.do")) {
			HttpSession session = request.getSession();
			request.setCharacterEncoding("utf-8");
			String email = request.getParameter("email");
			String pw = request.getParameter("pw");

			memberDAO dao = new memberDAO();
			memberDTO dto_up = new memberDTO(email, pw);
			//memberDAO에서 넘어오는 DTO값을 받아서
			//DTO가 null이 아니였을때는 로그인처리를 하고
			//DTO가 null이였을떄는 'LoginFalse.jsp'로 이동하게 하시오
			memberDTO dto = dao.Login(dto_up);
				
			if(dto!=null) {
				session.setAttribute("dto", dto);
				
				response.sendRedirect("main.jsp");
			}else {
				response.sendRedirect("LoginFalse.jsp");
			}

		}else if(command.contentEquals("JoinCon.do")) {
			HttpSession session = request.getSession();
			request.setCharacterEncoding("utf-8");
			String email = request.getParameter("email");
			String pw = request.getParameter("pw");
			String tel = request.getParameter("tel");
			String addr = request.getParameter("addr");
			
			memberDAO dao = new memberDAO();
			memberDTO dto = new memberDTO(email, pw, tel, addr);
			int cnt = dao.Join(dto);
			
			// 1. memberDAO에 해당하는 기능메소드로 값 보내주기(객체생성, 메소드, 매개변수)
			// 2. cnt값 리턴해주기(메소드, 리턴)
			
			if (cnt > 0) {
				// 두페이지에서만 정보공유
				request.setAttribute("dto", dto);	
				RequestDispatcher dis = request.getRequestDispatcher("joinSuccess.jsp");
				dis.forward(request, response); 
				// 1. request에 회원정보 저장
				// 2. jsp으로 이동하겠다
				// 3. 이동을 할때 현재 페이지의 request와 response를 같이 가지고 이동하겠다.
				
				// 왜 request영역을 쓰냐?
				// 정보를 딱 한번쓰고 사라져도 상관없어서 - 두가지 페이지에서만 정보를 주고 받을 때
				
				
				
				
				//JoinCon에서 joinSuccess.jsp로 값을 보낼 수 있는 두가지 방법
				// 1. 세션활용
				// 2. QueryString 활용
			}
		}else if(command.equals("DeleteCon")) {
			
		}
	
	
	}

}
